{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.jsx","PathfindingVisualizer/PathfindingVisualizer.tsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggle","nodesInShortestPathOrder","console","log","i","setTimeout","animateShortestPath","document","getElementById","classList","add","finishNode","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIndex","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9ee896d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\n\r\nimport './Node.css'\r\n\r\n// interface Props {\r\n//     col: number\r\n//     row: number\r\n//     isStart: boolean\r\n//     isFinish: boolean\r\n//     isWall: boolean\r\n//     onMouseDown: MouseEvent\r\n//     onMouseEnter: MouseEvent\r\n//     onMouseUp: MouseEvent\r\n// }\r\n\r\n// interface State {}\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n        } = this.props\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n            ? 'node-wall'\r\n            : ''\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}\r\n            ></div>\r\n        )\r\n    }\r\n}\r\n","export function dijkstra(grid, startNode, endNode) {\r\n    const visitedNodesInOrder = []\r\n    startNode.distance = 0\r\n\r\n    const unvisitedNodes = getAllNodes(grid)\r\n\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes)\r\n        const closestNode = unvisitedNodes.shift()\r\n\r\n        if (closestNode.isWall) continue\r\n\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder\r\n        closestNode.isVisited = true\r\n        visitedNodesInOrder.push(closestNode)\r\n\r\n        if (closestNode === endNode) return visitedNodesInOrder\r\n        updateUnvisitedNeighbors(closestNode, grid)\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1\r\n        neighbor.previousNode = node\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = []\r\n    const { col, row } = node\r\n    if (row > 0) neighbors.push(grid[row - 1][col])\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col])\r\n    if (col > 0) neighbors.push(grid[row][col - 1])\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited)\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = []\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = []\r\n    let currentNode = finishNode\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return nodesInShortestPathOrder\r\n}\r\n","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra'\r\n\r\nimport './PathfindingVisualizer.css'\r\n\r\ninterface Props {}\r\n\r\ninterface Nodes {\r\n    row: number\r\n    col: number\r\n    isStart: boolean\r\n    isFinish: boolean\r\n    isWall: boolean\r\n}\r\n\r\ninterface State {\r\n    grid: Array<Array<Nodes>>\r\n    mouseIsPressed: boolean\r\n}\r\n\r\nconst START_NODE_ROW = 10\r\nconst START_NODE_COL = 15\r\nconst END_NODE_ROW = 10\r\nconst END_NODE_COL = 35\r\n\r\nexport default class PathfindingVisualizer extends Component<Props, State> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid()\r\n        this.setState({ grid })\r\n    }\r\n\r\n    handleMouseDown(row: number, col: number) {\r\n        const newGrid = getNewGridWithWallToggle(this.state.grid, row, col)\r\n        this.setState({ grid: newGrid, mouseIsPressed: true })\r\n    }\r\n\r\n    handleMouseEnter(row: number, col: number) {\r\n        if (!this.state.mouseIsPressed) return\r\n        const newGrid = getNewGridWithWallToggle(this.state.grid, row, col)\r\n        this.setState({ grid: newGrid })\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({ mouseIsPressed: false })\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder: any, nodesInShortestPathOrder: any) {\r\n        console.log('animate')\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder)\r\n                }, 10 * i)\r\n                return\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i]\r\n                console.log('changeClass')\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    ?.classList.add('node-visited')\r\n            }, 10 * i)\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder: any) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i]\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    ?.classList.add('node-shortest-path')\r\n            }, 50 * i)\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const { grid } = this.state\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n        const endNode = grid[END_NODE_ROW][END_NODE_COL]\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, endNode)\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode)\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n                </button>\r\n                <div className='grid'>\r\n                    {grid.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className='row'>\r\n                            {row.map((node, nodeIndex) => {\r\n                                const { row, col, isStart, isFinish, isWall } =\r\n                                    node\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIndex}\r\n                                        col={col}\r\n                                        isFinish={isFinish}\r\n                                        isStart={isStart}\r\n                                        isWall={isWall}\r\n                                        mouseIsPressed={mouseIsPressed}\r\n                                        onMouseDown={(\r\n                                            row: number,\r\n                                            col: number\r\n                                        ) => this.handleMouseDown(row, col)}\r\n                                        onMouseEnter={(\r\n                                            row: number,\r\n                                            col: number\r\n                                        ) => this.handleMouseEnter(row, col)}\r\n                                        onMouseUp={() => this.handleMouseUp()}\r\n                                        row={row}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = []\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = []\r\n        for (let col = 0; col < 50; col++) {\r\n            currentRow.push(createNode(col, row))\r\n        }\r\n        grid.push(currentRow)\r\n    }\r\n    return grid\r\n}\r\n\r\nconst createNode = (col: number, row: number) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    }\r\n}\r\n\r\nconst getNewGridWithWallToggle = (\r\n    grid: Array<Array<Nodes>>,\r\n    row: number,\r\n    col: number\r\n) => {\r\n    const newGrid = grid.slice()\r\n    const node = newGrid[row][col]\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    }\r\n    newGrid[row][col] = newNode\r\n    return newGrid\r\n}\r\n","import logo from './logo.svg'\r\nimport './App.css'\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='App'>\r\n            <PathfindingVisualizer></PathfindingVisualizer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}