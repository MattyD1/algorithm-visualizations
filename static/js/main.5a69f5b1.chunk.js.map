{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.jsx","algorithms/breadthFirstSearch.jsx","algorithms/depthFirstSearch.jsx","PathfindingVisualizer/PathfindingVisualizer.tsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","BFS","queueInOrder","queue","console","log","DFS","utilDFS","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggle","i","setTimeout","animateShortestPath","document","getElementById","classList","add","animateDijkstra","animateBFS","animateDFS","onClick","visualizeBFS","visualizeDijkstra","visualizeDFS","map","rowIndex","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5a69f5b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\n\r\nimport './Node.css'\r\n\r\n// interface Props {\r\n//     col: number\r\n//     row: number\r\n//     isStart: boolean\r\n//     isFinish: boolean\r\n//     isWall: boolean\r\n//     onMouseDown: MouseEvent\r\n//     onMouseEnter: MouseEvent\r\n//     onMouseUp: MouseEvent\r\n// }\r\n\r\n// interface State {}\r\n\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n        } = this.props\r\n        const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n            ? 'node-wall'\r\n            : ''\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}\r\n            ></div>\r\n        )\r\n    }\r\n}\r\n","export function dijkstra(grid, startNode, endNode) {\r\n    const visitedNodesInOrder = []\r\n    startNode.distance = 0\r\n\r\n    const unvisitedNodes = getAllNodes(grid)\r\n\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes)\r\n        const closestNode = unvisitedNodes.shift()\r\n\r\n        if (closestNode.isWall) continue\r\n\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder\r\n        closestNode.isVisited = true\r\n        visitedNodesInOrder.push(closestNode)\r\n\r\n        if (closestNode === endNode) return visitedNodesInOrder\r\n        updateUnvisitedNeighbors(closestNode, grid)\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1\r\n        neighbor.previousNode = node\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = []\r\n    const { col, row } = node\r\n    if (row > 0) neighbors.push(grid[row - 1][col])\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col])\r\n    if (col > 0) neighbors.push(grid[row][col - 1])\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited)\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = []\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = []\r\n    let currentNode = finishNode\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode)\r\n        currentNode = currentNode.previousNode\r\n    }\r\n    return nodesInShortestPathOrder\r\n}\r\n","export function BFS(grid, startNode, endNode) {\r\n    const unvisitedNodes = getAllNodes(grid)\r\n    const visitedNodesInOrder = []\r\n    const queueInOrder = [startNode]\r\n\r\n    var queue = []\r\n    console.log(unvisitedNodes)\r\n    console.log(startNode)\r\n\r\n    startNode.isVisited = true\r\n    queue.push(startNode)\r\n    console.log(queue)\r\n\r\n    while (queue.length > 0) {\r\n        sortNodesByDistance(unvisitedNodes)\r\n        const currentNode = queue.shift()\r\n        if (currentNode.isWall) continue\r\n        visitedNodesInOrder.push(currentNode)\r\n        const neighbors = getUnvisitedNeighbors(currentNode, grid)\r\n        if (currentNode === endNode) return visitedNodesInOrder\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true\r\n            queue.push(neighbor)\r\n            queueInOrder.push(neighbor)\r\n            neighbor.distance = currentNode.distance + 1\r\n            neighbor.previousNode = currentNode\r\n        }\r\n    }\r\n    return visitedNodesInOrder\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = []\r\n    const { col, row } = node\r\n    if (row > 0) neighbors.push(grid[row - 1][col])\r\n    if (col > 0) neighbors.push(grid[row][col - 1])\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col])\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited)\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = []\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n","export function DFS(grid, startNode, endNode) {\r\n    const unvisitedNodes = getAllNodes(grid)\r\n    const visitedNodesInOrder = []\r\n    startNode.isVisited = true\r\n    return utilDFS(grid, startNode, visitedNodesInOrder, endNode)\r\n}\r\n\r\nfunction utilDFS(grid, currentNode, visitedNodesInOrder, endNode) {\r\n    currentNode.isVisited = true\r\n    visitedNodesInOrder.push(currentNode)\r\n    console.log(currentNode)\r\n    const neighbors = getUnvisitedNeighbors(currentNode, grid)\r\n    if (currentNode === endNode) return visitedNodesInOrder\r\n\r\n    for (const neighbor of neighbors) {\r\n        if (currentNode.isWall) continue\r\n        return utilDFS(grid, neighbor, visitedNodesInOrder, endNode)\r\n    }\r\n    return visitedNodesInOrder\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = []\r\n    const { col, row } = node\r\n    if (row > 0) neighbors.push(grid[row - 1][col])\r\n    if (col > 0) neighbors.push(grid[row][col - 1])\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col])\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited)\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = []\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node)\r\n        }\r\n    }\r\n    return nodes\r\n}\r\n","import React, { Component } from 'react'\r\nimport Node from './Node/Node'\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra'\r\nimport { BFS } from '../algorithms/breadthFirstSearch'\r\nimport { DFS } from '../algorithms/depthFirstSearch'\r\n\r\nimport './PathfindingVisualizer.css'\r\n\r\ninterface Props {}\r\n\r\ninterface Nodes {\r\n    row: number\r\n    col: number\r\n    isStart: boolean\r\n    isFinish: boolean\r\n    isWall: boolean\r\n}\r\n\r\ninterface State {\r\n    grid: Array<Array<Nodes>>\r\n    mouseIsPressed: boolean\r\n}\r\n\r\nconst START_NODE_ROW = 10\r\nconst START_NODE_COL = 15\r\nconst END_NODE_ROW = 10\r\nconst END_NODE_COL = 35\r\n\r\nexport default class PathfindingVisualizer extends Component<Props, State> {\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid()\r\n        this.setState({ grid })\r\n    }\r\n\r\n    handleMouseDown(row: number, col: number) {\r\n        const newGrid = getNewGridWithWallToggle(this.state.grid, row, col)\r\n        this.setState({ grid: newGrid, mouseIsPressed: true })\r\n    }\r\n\r\n    handleMouseEnter(row: number, col: number) {\r\n        if (!this.state.mouseIsPressed) return\r\n        const newGrid = getNewGridWithWallToggle(this.state.grid, row, col)\r\n        this.setState({ grid: newGrid })\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({ mouseIsPressed: false })\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder: any, nodesInShortestPathOrder: any) {\r\n        console.log('animate')\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder)\r\n                }, 10 * i)\r\n                return\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i]\r\n                console.log('changeClass')\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    ?.classList.add('node-visited')\r\n            }, 10 * i)\r\n        }\r\n    }\r\n    animateBFS(visitedNodesInOrder: any, nodesInShortestPathOrder: any) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder)\r\n                }, 10 * i)\r\n                return\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i]\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    ?.classList.add('node-visited')\r\n            }, 10 * i)\r\n        }\r\n    }\r\n    animateDFS(visitedNodesInOrder: any, nodesInShortestPathOrder: any) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder)\r\n                }, 10 * i)\r\n                return\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i]\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    ?.classList.add('node-visited')\r\n            }, 10 * i)\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder: any) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i]\r\n                document\r\n                    .getElementById(`node-${node.row}-${node.col}`)\r\n                    ?.classList.add('node-shortest-path')\r\n            }, 50 * i)\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const { grid } = this.state\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n        const endNode = grid[END_NODE_ROW][END_NODE_COL]\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, endNode)\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode)\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\r\n    }\r\n\r\n    visualizeBFS() {\r\n        const { grid } = this.state\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n        const endNode = grid[END_NODE_ROW][END_NODE_COL]\r\n        const visitedNodesInOrder = BFS(grid, startNode, endNode)\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode)\r\n        this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder)\r\n    }\r\n\r\n    visualizeDFS() {\r\n        const { grid } = this.state\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n        const endNode = grid[END_NODE_ROW][END_NODE_COL]\r\n        const visitedNodesInOrder = DFS(grid, startNode, endNode)\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode)\r\n        this.animateDFS(visitedNodesInOrder, nodesInShortestPathOrder)\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeBFS()}>\r\n                    Visualize BFS Algorithm\r\n                </button>\r\n                <button onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n                </button>\r\n                <button onClick={() => this.visualizeDFS()}>\r\n                    Visualize DFS Algorithm\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        const grid = getInitialGrid()\r\n                        this.setState({ grid: grid })\r\n                    }}\r\n                >\r\n                    Clear Board\r\n                </button>\r\n                <div className='grid'>\r\n                    {grid.map((row, rowIndex) => (\r\n                        <div key={rowIndex} className='row'>\r\n                            {row.map((node, nodeIndex) => {\r\n                                const { row, col, isStart, isFinish, isWall } =\r\n                                    node\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIndex}\r\n                                        col={col}\r\n                                        isFinish={isFinish}\r\n                                        isStart={isStart}\r\n                                        isWall={isWall}\r\n                                        mouseIsPressed={mouseIsPressed}\r\n                                        onMouseDown={(\r\n                                            row: number,\r\n                                            col: number\r\n                                        ) => this.handleMouseDown(row, col)}\r\n                                        onMouseEnter={(\r\n                                            row: number,\r\n                                            col: number\r\n                                        ) => this.handleMouseEnter(row, col)}\r\n                                        onMouseUp={() => this.handleMouseUp()}\r\n                                        row={row}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst resetGrid = (grid: Array<Array<Nodes>>, row: number, col: number) => {}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = []\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = []\r\n        for (let col = 0; col < 50; col++) {\r\n            currentRow.push(createNode(col, row))\r\n        }\r\n        grid.push(currentRow)\r\n    }\r\n    return grid\r\n}\r\n\r\nconst createNode = (col: number, row: number) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    }\r\n}\r\n\r\nconst getNewGridWithWallToggle = (\r\n    grid: Array<Array<Nodes>>,\r\n    row: number,\r\n    col: number\r\n) => {\r\n    const newGrid = grid.slice()\r\n    const node = newGrid[row][col]\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    }\r\n    newGrid[row][col] = newNode\r\n    return newGrid\r\n}\r\n","import logo from './logo.svg'\r\nimport './App.css'\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='App'>\r\n            <PathfindingVisualizer></PathfindingVisualizer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}